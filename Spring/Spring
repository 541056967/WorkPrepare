# Spring
## 1. IoC和AOP
### IoC
> `Inverse of Control`是一种设计思想，将原本在程序中手动创建对象的控制权，交由Spring框架来管理。IoC容器是Spring用来实现IoC的载体，IoC容器实际上就是个Map（key，value），Map中存放的是各种对象。

> 将对象之间的相互依赖关系交给IoC容器来管理，并由IoC容器完成对象的注入，这样可以很大程序上简化应用的开发，把应用从复杂的依赖关系中解放出来。IoC容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象如何床架。

#### 初始化流程
- Resource资源定位：这个Resouce指的是BeanDefinition的资源定位。这个过程就是容器找数据的过程，就像水桶装水需要先找到水一样。
- BeanDefinition的载入和解析：这个载入过程是把用户定义好的Bean表示成Ioc容器内部的数据结构，而这个容器内部的数据结构就是BeanDefition。
- BeanDefinition注册
- prepareRefresh()：预备一下， 标记启动时间，上下文环境，我要的材料（beanDefinition）准备好了嘛？
- obtainFreshBeanFactory()：
    - 如果已经有了BeanFactory就销毁它里面的单例Bean并关闭这个BeanFactory。
    - 创建一个新的BeanFactory。
    - 对这个BeanFactory进行定制（customize),如allowBeanDefinitionOverriding等参数
    - 转载BeanDefinitions(读取配置文件，将xml转换成对应得BeanDefinition)
    - 检查是否同时启动了两个BeanFactory。
- prepareBeanFactory(beanFactory)：设置beanFactory的类加载器，材料（BeanDefinition）解析器等
- postProcessBeanFactory(beanFactory)：
    - 设置beanFactory的后置处理器
    - 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事
- invokeBeanFactoryPostProcessors(beanFactory)：
    - 调用beanFactory的后置处理器（BeanDefinitionRegisterPostProcessor和BeanFactoryPostProcessor）
    - 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法
- registerBeanPostProcessors(beanFactory)：
    - 注册 BeanPostProcessor 的实现类（bean的后置处理器）
    - 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化
- initMessageSource()：对上下文中的消息源进行初始化
- initApplicationEventMulticaster()：初始化上下文的事件广播器
- onRefresh()：- 模版方法，具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）
- registerListeners()：注册事件监听器
- finishBeanFactoryInitialization(beanFactory)：初始化所有的 singleton beans
- finishRefresh()：最后，广播事件，ApplicationContext 初始化完成

### AOP
> `Aspect-Oriented Parogramming`:面向切片编程能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性
- **Spring AOP就是基于动态代理的**
- 如果要代理的对象，实现了某个接口，那么Spring AOP会使用**JDK Proxy**，
- 而对于没有实现接口的对象，这时候Spring AOP会使用 **Cglib** 生成一个被代理对象的子类来作为代理。

![AOp](https://user-gold-cdn.xitu.io/2018/9/14/165d631e56799a5c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)

#### 初始化liucheng
- 第一句，注册一个AnnotationAwareAspectJAutoProxyCreator（称它为自动代理器），这个Creator是AOP的操作核心，也是扫描Bean，代理Bean的操作所在。 
- 第二句，解析配置元素，决定代理的模式。其中有JDK动态代理，还有CGLIB代理，这部分后续会再细讲。
- 第三句，作为系统组件，把Creator这个Bean，放到Spring容器中。让Spring实例化，启动这个Creator。

#### 总结：
- Spring加载自动代理器AnnotationAwareAspectJAutoProxyCreator，当作一个系统组件。
- 当一个bean加载到Spring中时，会触发自动代理器中的bean后置处理，然后会先扫描bean中所有的Advisor
- 然后用这些Adviosr和其他参数构建ProxyFactory
- ProxyFactory会根据配置和目标对象的类型寻找代理的方式（JDK动态代理或CGLIG代理）
- 然后代理出来的对象放回context中，完成Spring AOP代理

## 2. Bean
### bean的作用域
* **singleton作用域**：表示在Spring容器中只有一个Bean实例，以单例的形式存在，是默认的Bean作用域
* **prototype作用域**：原型作用域，每次调用Bean时都会创建一个新实例，也就是说每次调用`getBean()`方法,相当于执行了`new Bean()`
* **request作用域**：每次 Http 请求时都会创建一个新的 Bean，该作用域仅适应于`WebApplicationContext`环境。
* **session 作用域**：同一个 Http Session 共享一个 Bean 对象，不同的 Session 拥有不同的 Bean 对象，仅适用于 WebApplicationContext 环境。
* **application**作用域：全局的Web作用域，类似于 Servlet 中的 Application。

### Spring的单例有线程安全问题吗
> 多个线程操作同一个对象的时候，对这个对象的非静态成员变量的写操作会存在线程安全问题
> 常见良种解决办法：
* 在Bean对象中尽量避免定义可变的成员变量（不太现实）
* 在类中定义一个ThreadLocal成员变量，将需要的可变成员变量保存在ThreadLocal中（推荐）

### 什么是三级缓存
* 第一级缓存： 单例缓存池singletonObjects
* 第二级缓存： 早期提前暴露的对象缓存earlySingletonObjects（属性还没有值对象也没有被初始化）
* 第三级缓存： singletonFactories 单例对象工厂缓存

### 创建Bean的整个过程
1. 首先finishBeanFactoryInitialization->preInstantiateSingletons->getBean->doGetBean;
2. 在doGetBean中，transformedBeanName:主要负责判断一下有木有别名；getSingleton：从一级缓存singletonObjects拿bean，在getSingleton方法中，有一个判断条件就是isSingletonCurrentlyInCreation，判断为false，因为他是第一次进来，并且还没有正在创建该bean；dependsOn：依赖，暂时先不说他。
3. 再来一次getSingleton：再一次的从singketonObjects缓存拿，依然没有的。接着有个重点beforeSingletonCreation：它把bean添加到临时的singletonsCurrentlyInCreation，这就意味着，下次再碰见它，那可就是true了。接着singletonFactory.getObject()，这里getObject调用的是传递的接口createBean方法。
4. 在createBean方法中：有个doCreateBean->createBeanInstance方法：它就是直接实例化，实际上构造器有反应了（区分JVM创建对象和Spring创建对象），但是没有赋值（初始化）；earlySingletonExposure：提前暴漏该bean。但要知道三个变量，为什么他是true：isSingleton()，是否单例，那肯定是哦；（这里解释了这里是单例才能提前曝漏，意味着才能存三级缓存）allowCircularReferences，默认变量为true，写死了；isSingletonCurrentlyInCreation，这里可就为true了，因为步骤3，已经将它设置为true了。那么会进来这个方法：addSingletonFactory
5. addSingletonFactory在这个方法中：将该bean放入到三级缓存singletonFactories中。（解决循环依赖）
6. 接下来，就是它了，populateBean：实际上就是属性赋值。（如果这里要有A依赖B，又发现三级缓存中没有B，那么它就会再次执行一次（递归开始）getBean->doGetBean->createBeanInstance(把B给实例化一下)，同样的道理，这里会将B也会放入三级缓存中，B开始populateBean，那么它发现B依赖A，此时三级缓存中有A(精髓，牛逼)，然后把A放到二级缓存中，同时从三级缓存中移除，接着得到A之后直接赋值，最后完成了初始化，然后来到addSingleton，将B仍到了一级缓存，同时将B从三级缓存仍出去）返回B，递归结束，得到B之后将B的赋值给A了。
7. 最后将二级缓存的A删除，仍到一级缓存中。

### bean的生命周期
![bean的生命周期-GbJvfY](https://gitee.com/dreamcater/blog-img/raw/master/uPic/bean的生命周期-GbJvfY.png)
* Bean容器找到配置文件中Spring Bean的定义
* Bean容器利用Java Reflection API创建一个Bean的实例
* 如果涉及一些属性值，就用`set()`方法设置一些属性值
* 如果Bean实现了`BeanNameAware`接口，调用 `setBeanName()`方法，传入Bean的名字。
- 如果 Bean 实现了 `BeanClassLoaderAware` 接口，调用 `setBeanClassLoader()`方法，传入 `ClassLoader`对象的实例。
- 与上面的类似，如果实现了其他 `*.Aware`接口，就调用相应的方法。
- 如果有和加载这个 Bean 的 Spring 容器相关的 `BeanPostProcessor` 对象，执行`postProcessBeforeInitialization()` 方法
- 如果Bean实现了`InitializingBean`接口，执行`afterPropertiesSet()`方法。
- 如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。
- 如果有和加载这个 Bean的 Spring 容器相关的 `BeanPostProcessor` 对象，执行`postProcessAfterInitialization()` 方法
- 当要销毁 Bean 的时候，如果 Bean 实现了 `DisposableBean` 接口，执行 `destroy()` 方法。
- 当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。
 
 ## 3.Spring事务
 ### 隔离级别
- **TransactionDefinition.ISOLATION_DEFAULT:** 使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.
- **TransactionDefinition.ISOLATION_READ_UNCOMMITTED:** 最低的隔离级别，允许读取尚未提交的数据变更，**可能会导致脏读、幻读或不可重复读**
- **TransactionDefinition.ISOLATION_READ_COMMITTED:** 允许读取并发事务已经提交的数据，**可以阻止脏读，但是幻读或不可重复读仍有可能发生**
- **TransactionDefinition.ISOLATION_REPEATABLE_READ:** 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，**可以阻止脏读和不可重复读，但幻读仍有可能发生。**
- **TransactionDefinition.ISOLATION_SERIALIZABLE:** 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，**该级别可以防止脏读、不可重复读以及幻读**。但是这将严重影响程序的性能。通常情况下也不会用到该级别。

### @Transactional(rollbackFor = Exception.class)注解了解吗
1. @Transactional注解只能应用到public修饰符上，其它修饰符不起作用，但不报错。
2. 默认情况下此注解会对unchecked异常进行回滚，对checked异常不回滚。

### Spring的的事务传播机制
1. **required**（默认）：支持使用当前事务，如果当前事务不存在，创建一个新事务。
2. **requires_new**：创建一个新事务，如果当前事务存在，把当前事务挂起。
3. **supports**：支持使用当前事务，如果当前事务不存在，则不使用事务。
4. **not_supported**：无事务执行，如果当前事务存在，把当前事务挂起。
5. **mandatory**：强制，支持使用当前事务，如果当前事务不存在，则抛出Exception。
6. **never**：无事务执行，如果当前有事务则抛出Exception。
7. **nested**：嵌套事务，如果当前事务存在，那么在嵌套的事务中执行。如果当前事务不存在，则表现跟REQUIRED一样。

### 事务源码

- 开启@EnableTransactionManagement
- 利用TransactionManagementConfigurationSelector给容器中会导入组件
  - AutoProxyRegistrar
    - 给容器中注册一个 InfrastructureAdvisorAutoProxyCreator 组件
    - 利用后置处理器机制在对象创建以后，包装对象，返回一个代理对象（增强器），代理对象执行方法利用拦截器链进行调用；
  - ProxyTransactionManagementConfiguration（给容器中注册事务增强器）
    - 事务增强器要用事务注解的信息，AnnotationTransactionAttributeSource解析事务注解
    - 事务拦截器


## 4. Spring Boot
### Springboot自动装配原理

SpringBootApplication的注解
[https://www.jianshu.com/p/943650ab7dfd](https://www.jianshu.com/p/943650ab7dfd)

- @SpringBootConfiguration:允许在上下文中注册额外的bean或导入其他配置类
- @EnableAutoConfiguration:启用 SpringBoot 的自动配置机制
- @ComponentScan: 扫描常用的注解

其中 @EnableAutoConfiguration 是实现自动配置的入口，该注解又通过 @Import 注解导入了AutoConfigurationImportSelector，在该类中加载 META-INF/spring.factories 的配置信息。然后筛选出以 EnableAutoConfiguration 为 key 的数据，加载到 IOC 容器中，实现自动配置功能！

### @Resource和@Autowired区别
#### 共同点
两者都可以写在字段和setter方法上。两者如果都写在字段上，那么就不需要再写setter方法。
```java
public class TestServiceImpl {
    // 下面两种@Autowired只要使用一种即可
    @Autowired
    private UserDao userDao; // 用于字段上
    
    @Autowired
    public void setUserDao(UserDao userDao) { // 用于属性的方法上
        this.userDao = userDao;
    }
}
```

### 不同点

1. @Autowired

@Autowired注解是**按照类型**（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用**按照名称**（byName）来装配，可以结合**@Qualifier注解**一起使用。(通过类型匹配找到多个candidate,在没有@Qualifier、@Primary注解的情况下，会使用对象名作为最后的fallback匹配)如下：

```java
public class TestServiceImpl {
    @Autowired
    @Qualifier("userDao")
    private UserDao userDao; 
}
```

2. @Resource

@Resource默认按照ByName自动注入。@Resource有两个重要的属性：**name和type**，而Spring将@Resource注解的name属性解析为bean的名字，而type属性则解析为bean的类型。**所以，如果使用name属性，则使用byName的自动注入策略，而使用type属性时则使用byType自动注入策略。如果既不制定name也不制定type属性，这时将通过反射机制使用byName自动注入策略**