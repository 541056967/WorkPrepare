# 1. 索引是什么
> 索引是一种特殊的文件（InnoDB中的索引是数据表空间的一个组成部分），包含着对表中所有数据记录的引用指针。
> 索引是一种数据结构，协助快速查询、更新数据表中的数据

# 2. 索引的优缺点
## 优点
  * 大大加快数据的检索速度
  * 在查询过程中使用优化隐藏器，提高系统性能
## 缺点
 * 时间方面：创建和维护索引需要消耗时间，修改数据时需要动态维护
 * 空间方面：占据物理空间

# 3. MySQL的索引类型
## 从存储结构区分
> B-Tree(B+ Tree)，Hash索引，full-index全文索引，R-Tree索引

## 从应用层次来看：普通索引、唯一索引、复合索引
 * 普通索引(单列索引)：一个索引只包含单个列，一个表可以有多个单列索引(普通索引)
 * 唯一索引：索引列的值必须唯一，但可以为空
 * 复合索引：多列值组成一个索引，用于组合搜索，效率大于索引合并
 * 聚簇索引：并不是一种单独的索引类型，而是一种数据存储方式。InnoDB的聚簇索引就是在同一个结构中保存了B+Tree和数据行
 * 非聚簇索引：除聚簇索引外都是聚簇索引

# 4. 索引的底层实现
## hash索引
> 基于哈希表实现，只有精确匹配索引所有列的查询才有效，对于每一行数据，存储引擎会对所有的索引列计算一个哈希码(hashcode)，并且hash索引将所有的哈希码存储在索引中，同时在索引表保存指向每个数据行的指针

## B+Tree索引
> 数据保存在叶子节点上，同时还增加了顺序访问指针，每个叶子节点指向相邻的叶子节点的地址。进行查找时只要查找两个节点，遍历即可，效率比B Tree高
### B+Tree的性质
 * 所有的叶子节点包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子节点本身依关键字的大小自小而大顺序链接
 * 所有的非终端节点可以看成是索引部分，结点中仅含其子树的最大(或最小)的关键字
 * 对象的插入和删除仅在叶子结点上进行
 * 有两个头指针，一个是树的根节点，一个是最小关键码的叶节点

# 5. 为什么索引结构默认B+Tree而不是B-Tree、hash、红黑树?
## 与B-Tree比较
  * B+树的磁盘读写代价更低：B+树内部节点并没有指向关键字具体信息的指针，内部节点相比B树更小；如果把所有内部节点的关键字存放在同一块盘中，那么盘所能容纳的关键字数量也越多，一次性读入内存需要查询的关键字也越多，相对IO读写次数降低
  * B+树的数据都存储在叶子节点中，分支均为索引，方便扫库，只需要遍历一遍叶子节点即可，B需要进行一次中序遍历

## 与hash比较
 * hash没有排序，IO复杂度高，不支持范围查找
 * 如果有大量重复键值的情况，哈希索引效率很低，存在哈希碰撞的问题
## 与二叉树比较
* 树的高度不均匀，不能自平衡，查找效率跟数据有关，IO代价高

## 与红黑树比较
* 树的高度随着数据量增加而增加，IO代价高

# 6. 聚簇索引和非聚簇索引

