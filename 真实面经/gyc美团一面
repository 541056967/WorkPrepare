# 数据库
## 默认的隔离级别
> REPETABLE_READ, 数据库默认隔离级别，并且使用了next key lock算法，可以达到serializable

## 当前读和快照读
### 当前读
> 　当前读, 读取的是最新版本, 并且对读取的记录加锁, 阻塞其他事务同时改动相同记录，避免出现安全问题。
* 实现方式： next-key lock (行记录锁+gap间隙锁)
### 快照读
> 单纯的select操作

## mybaits的工作原理
> 通过xml文件或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中的动态参数进行映射生成最终执行的sql语句，最后由mybaits框架执行sql并将结果映射为java对象返回

# java
## 1.6中，JVM对synchronized的优化
* 锁膨胀
* 锁消除
* 锁粗化
* 自旋与自适应自旋

## CAS中cpu空转
> 限制最大次数,自适应自旋锁

# 操作系统
## IO多路复用
> 内核一旦发现进程指定的一个或多个IO条件准备读取，他就通知该进程
  
## select\poll\epoll
* select： 仅仅知道，有I/O事件发生了，却并不知道是哪那几个流（可能有一个，多个，甚至全部），我们只能无差别轮询所有流，找出能读出数据，或者写入数据的流，对他们进行操作。所以select具有O(n)的无差别轮询复杂度，同时处理的流越多，无差别轮询时间就越长
* poll： 本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个文件描述对应的设备状态， 但是它没有最大连接数的限制，原因是它是基于链表来存储的.
* epoll： 可以理解为event poll，不同于忙轮询和无差别轮询，epoll会把哪个流发生了怎样的I/O事件通知我们。所以我们说epoll实际上是事件驱动（每个事件关联上fd）的，此时我们对这些流的操作都是有意义的。（复杂度降低到了O(1)）

## Linux
### 各种命令
* free： 查看内存
* ps -l :查看进程
* top： 查看cpu
