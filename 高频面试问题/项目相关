# 项目相关
## 1. PDC Android
> 涉及技术点：WebSocket， 数据库， SMB， Android, fastJson
### 1.1 WebSocket
#### WebSocket介绍
> WebSocket是一个持久化的协议，是一个完整的应用层协议；与HTTP协议基本没有关系，只是为了兼容现有浏览器，所以在握手阶段使用了HTTP

#### 项目中使用okhttp3实现websocket
```java
 private String wsUrl;
    private WebSocket webSocket;
    public ConnectStatus status;
    public static String cookie;
    public static String serverID;
    public RecMesMap recMes = new RecMesMap();
    private OkHttpClient client = new OkHttpClient.Builder()
            .build();

    private MyWebSocket(String wsUrl) {
        this.wsUrl = wsUrl;
    }

    public synchronized static MyWebSocket getInstance(String url) {

        INST = new MyWebSocket(url);
        return INST;
    }

    public void connect() {
        //构造request对象
        Request request = new Request.Builder()
                .url(wsUrl)
                .build();

        webSocket = client.newWebSocket(request, this);
        status = ConnectStatus.Connecting;
    }
```
> 创建MyWebSocket类，继承WebSocketListener
* onOpen()，连接成功
* onMessage(String text)，收到字符串类型的消息，一般我们都是使用这个
* onMessage(ByteString bytes)，收到字节数组类型消息，我这里没有用到
* onClosed()，连接关闭
* onFailure()，连接失败，一般都是在这里发起重连操作
* send(),向服务端发送消息
* 为了确保服务端和客户端是否保活，需要发送心跳报文进行检测

### 1.2 SMB
#### SMB概述
> SMB(ServerMessageBlock)是微软和英特尔在1987年定制的协议，是在会话层和表示层以及小部分应用层的协议，主要用来使得一个网络上的计算机共享文件等资源

#### Android 使用SMB
* `build.gradle`中引入`implementation 'org.codelibs:jcifs:2.1.19'`
* 下载文件实例
```java
public int downloadFile(String remoteUrl, String localFilePath) {
        InputStream in = null;
        OutputStream out = null;
        SmbFileInputStream smbIn = null;
        FileOutputStream fo = null;
        int flag = -1;
        try {
            SmbFile remoteFile = new SmbFile(this.url + remoteUrl,auth);
            if (remoteFile == null) {
               Log.i("共享文件不存在","");
                return flag;
            }
            String fileName = remoteFile.getName();
            File localFile = new File(localFilePath);
            smbIn = new SmbFileInputStream(remoteFile);
            fo = new FileOutputStream(localFile);
            in = new BufferedInputStream(smbIn);
            out = new BufferedOutputStream(fo);
            byte[] buffer = new byte[smbBufferLen];
            int readLen = -1;
            readLen = in.read(buffer);
            while (readLen != -1 && !FileTransferService.getAbortFlag()) {
                out.write(buffer, 0, readLen);

                //保存下载速度
                downloadBytes += readLen;

                readLen = in.read(buffer);
            }
            if(readLen == -1){
                flag = 0;
            }

        } catch (Exception e) {
            Log.e(e.getMessage(),"");
        } finally {
            try {
                if(out != null){
                    out.close();
                }
                if(in != null){
                    in.close();
                }
                if(smbIn != null){
                    smbIn.close();
                }
                if(fo != null){
                    fo.close();
                }
            } catch (IOException e) {
                Log.e(e.getMessage(),"");
            }
        }
        return flag;
    }
```

## 2. 智能电网仿真工具
### 2.1 Java Sim
### 2.2 Java Swing

## 3. 基于 SDN 的网络管理软件开发
### 3.0 SDN
> Software Defined Network(软件定义网络)，SDN是一种拥有逻辑集中式的控制平面，抽象化的数据平面的新网络架构。数据平面与控制平面分离，控制平面与数据平面之间有统一的开放接口OpenFlow，通过统一而开放的南向接口来实现对网络直接进行控制编程。
#### SDN的三个特征
* **网络开放可编程**：SDN建立了新的网络抽象和模型，为用户提供了一套完整的通用API，使用户可以在控制器上编程实现对网络的控制、配置和管理，加快网络部署的进程
* **控制平面与数据平面的分离**：控制与数据平面的解耦合，双方只需要遵循统一的开放接口进行通信即可
* **逻辑上的集中控制**：控制器担负起收集和管理所有网络状态信息的重任

#### SDN的网络体系结构
![SDN网络体系结构](https://pic2.zhimg.com/80/v2-6cfed26070184443b94f717ae75b09fd_720w.jpg)
* SDN网络应用层：实现了对应的网络功能应用，这些应用程序通过调用SDN控制器的北向接口，实现对数据平面设备的配置、管理和控制
* 北向接口：SDN控制器与应用之间的开放接口，将数据平面资源和状态信息抽象成统一的开放编程接口
* SDN控制器：SDN的大脑，通过北向接口给上层网络应用层提供不同层次的可编程能力，通过南向接口对数据平面进行统一配置、管理和控制
* 南向接口：控制器与数据平面的开放接口，通过南向接口对数据平面进行编程控制，实现数据平面的转发等网络行为
* 数据平面：包括基于软件实现和基于硬件实现的数据平面设备。通过南向接口接收指令并反馈网络配置和运行时的状态信息



### 3.1 Floodlight
### 3.2 Python+Flask
### 3.3 Pyecharts